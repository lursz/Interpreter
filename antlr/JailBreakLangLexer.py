# Generated from JailBreakLang.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,314,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
        26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,5,43,271,8,43,10,43,12,43,274,9,43,1,43,1,43,1,44,1,44,5,
        44,280,8,44,10,44,12,44,283,9,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,5,46,300,8,46,10,46,12,
        46,303,9,46,1,46,3,46,306,8,46,1,47,4,47,309,8,47,11,47,12,47,310,
        1,47,1,47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,1,0,6,2,0,10,10,13,13,2,0,65,90,97,122,
        3,0,48,57,65,90,97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,
        318,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,102,1,0,0,
        0,5,104,1,0,0,0,7,106,1,0,0,0,9,111,1,0,0,0,11,115,1,0,0,0,13,120,
        1,0,0,0,15,126,1,0,0,0,17,128,1,0,0,0,19,130,1,0,0,0,21,134,1,0,
        0,0,23,141,1,0,0,0,25,146,1,0,0,0,27,152,1,0,0,0,29,156,1,0,0,0,
        31,164,1,0,0,0,33,167,1,0,0,0,35,172,1,0,0,0,37,178,1,0,0,0,39,182,
        1,0,0,0,41,185,1,0,0,0,43,189,1,0,0,0,45,194,1,0,0,0,47,198,1,0,
        0,0,49,203,1,0,0,0,51,209,1,0,0,0,53,212,1,0,0,0,55,217,1,0,0,0,
        57,222,1,0,0,0,59,228,1,0,0,0,61,231,1,0,0,0,63,235,1,0,0,0,65,239,
        1,0,0,0,67,246,1,0,0,0,69,249,1,0,0,0,71,252,1,0,0,0,73,254,1,0,
        0,0,75,256,1,0,0,0,77,258,1,0,0,0,79,260,1,0,0,0,81,262,1,0,0,0,
        83,264,1,0,0,0,85,266,1,0,0,0,87,268,1,0,0,0,89,277,1,0,0,0,91,284,
        1,0,0,0,93,305,1,0,0,0,95,308,1,0,0,0,97,98,5,87,0,0,98,99,5,65,
        0,0,99,100,5,76,0,0,100,101,5,76,0,0,101,2,1,0,0,0,102,103,5,61,
        0,0,103,4,1,0,0,0,104,105,5,44,0,0,105,6,1,0,0,0,106,107,5,84,0,
        0,107,108,5,82,0,0,108,109,5,65,0,0,109,110,5,80,0,0,110,8,1,0,0,
        0,111,112,5,75,0,0,112,113,5,69,0,0,113,114,5,89,0,0,114,10,1,0,
        0,0,115,116,5,71,0,0,116,117,5,65,0,0,117,118,5,84,0,0,118,119,5,
        69,0,0,119,12,1,0,0,0,120,121,5,71,0,0,121,122,5,85,0,0,122,123,
        5,65,0,0,123,124,5,82,0,0,124,125,5,68,0,0,125,14,1,0,0,0,126,127,
        5,123,0,0,127,16,1,0,0,0,128,129,5,125,0,0,129,18,1,0,0,0,130,131,
        5,77,0,0,131,132,5,65,0,0,132,133,5,80,0,0,133,20,1,0,0,0,134,135,
        5,80,0,0,135,136,5,76,0,0,136,137,5,65,0,0,137,138,5,89,0,0,138,
        139,5,69,0,0,139,140,5,82,0,0,140,22,1,0,0,0,141,142,5,69,0,0,142,
        143,5,88,0,0,143,144,5,73,0,0,144,145,5,84,0,0,145,24,1,0,0,0,146,
        147,5,80,0,0,147,148,5,82,0,0,148,149,5,73,0,0,149,150,5,78,0,0,
        150,151,5,84,0,0,151,26,1,0,0,0,152,153,5,73,0,0,153,154,5,78,0,
        0,154,155,5,84,0,0,155,28,1,0,0,0,156,157,5,66,0,0,157,158,5,79,
        0,0,158,159,5,79,0,0,159,160,5,76,0,0,160,161,5,69,0,0,161,162,5,
        65,0,0,162,163,5,78,0,0,163,30,1,0,0,0,164,165,5,73,0,0,165,166,
        5,70,0,0,166,32,1,0,0,0,167,168,5,69,0,0,168,169,5,76,0,0,169,170,
        5,83,0,0,170,171,5,69,0,0,171,34,1,0,0,0,172,173,5,87,0,0,173,174,
        5,72,0,0,174,175,5,73,0,0,175,176,5,76,0,0,176,177,5,69,0,0,177,
        36,1,0,0,0,178,179,5,70,0,0,179,180,5,79,0,0,180,181,5,82,0,0,181,
        38,1,0,0,0,182,183,5,73,0,0,183,184,5,78,0,0,184,40,1,0,0,0,185,
        186,5,70,0,0,186,187,5,85,0,0,187,188,5,78,0,0,188,42,1,0,0,0,189,
        190,5,86,0,0,190,191,5,79,0,0,191,192,5,73,0,0,192,193,5,68,0,0,
        193,44,1,0,0,0,194,195,5,85,0,0,195,196,5,83,0,0,196,197,5,69,0,
        0,197,46,1,0,0,0,198,199,5,76,0,0,199,200,5,69,0,0,200,201,5,70,
        0,0,201,202,5,84,0,0,202,48,1,0,0,0,203,204,5,82,0,0,204,205,5,73,
        0,0,205,206,5,71,0,0,206,207,5,72,0,0,207,208,5,84,0,0,208,50,1,
        0,0,0,209,210,5,85,0,0,210,211,5,80,0,0,211,52,1,0,0,0,212,213,5,
        68,0,0,213,214,5,79,0,0,214,215,5,87,0,0,215,216,5,78,0,0,216,54,
        1,0,0,0,217,218,5,84,0,0,218,219,5,82,0,0,219,220,5,85,0,0,220,221,
        5,69,0,0,221,56,1,0,0,0,222,223,5,70,0,0,223,224,5,65,0,0,224,225,
        5,76,0,0,225,226,5,83,0,0,226,227,5,69,0,0,227,58,1,0,0,0,228,229,
        5,79,0,0,229,230,5,82,0,0,230,60,1,0,0,0,231,232,5,65,0,0,232,233,
        5,78,0,0,233,234,5,68,0,0,234,62,1,0,0,0,235,236,5,78,0,0,236,237,
        5,79,0,0,237,238,5,84,0,0,238,64,1,0,0,0,239,240,5,82,0,0,240,241,
        5,69,0,0,241,242,5,84,0,0,242,243,5,85,0,0,243,244,5,82,0,0,244,
        245,5,78,0,0,245,66,1,0,0,0,246,247,5,61,0,0,247,248,5,61,0,0,248,
        68,1,0,0,0,249,250,5,33,0,0,250,251,5,61,0,0,251,70,1,0,0,0,252,
        253,5,60,0,0,253,72,1,0,0,0,254,255,5,62,0,0,255,74,1,0,0,0,256,
        257,5,40,0,0,257,76,1,0,0,0,258,259,5,41,0,0,259,78,1,0,0,0,260,
        261,5,42,0,0,261,80,1,0,0,0,262,263,5,47,0,0,263,82,1,0,0,0,264,
        265,5,43,0,0,265,84,1,0,0,0,266,267,5,45,0,0,267,86,1,0,0,0,268,
        272,5,35,0,0,269,271,8,0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,
        270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,
        276,6,43,0,0,276,88,1,0,0,0,277,281,7,1,0,0,278,280,7,2,0,0,279,
        278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,
        90,1,0,0,0,283,281,1,0,0,0,284,285,5,82,0,0,285,286,5,65,0,0,286,
        287,5,78,0,0,287,288,5,68,0,0,288,289,5,79,0,0,289,290,5,77,0,0,
        290,291,1,0,0,0,291,292,5,40,0,0,292,293,3,93,46,0,293,294,5,44,
        0,0,294,295,3,93,46,0,295,296,5,41,0,0,296,92,1,0,0,0,297,301,7,
        3,0,0,298,300,7,4,0,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,
        0,0,0,301,302,1,0,0,0,302,306,1,0,0,0,303,301,1,0,0,0,304,306,5,
        48,0,0,305,297,1,0,0,0,305,304,1,0,0,0,306,94,1,0,0,0,307,309,7,
        5,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,
        0,0,0,311,312,1,0,0,0,312,313,6,47,0,0,313,96,1,0,0,0,6,0,272,281,
        301,305,310,1,6,0,0
    ]

class JailBreakLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    RETURN = 33
    EQUALS = 34
    NOT_EQUALS = 35
    LESS_THAN = 36
    GREATER_THAN = 37
    LPAREN = 38
    RPAREN = 39
    MUL = 40
    DIV = 41
    ADD = 42
    SUB = 43
    COMMENT = 44
    ID = 45
    RAND = 46
    INT = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'WALL'", "'='", "','", "'TRAP'", "'KEY'", "'GATE'", "'GUARD'", 
            "'{'", "'}'", "'MAP'", "'PLAYER'", "'EXIT'", "'PRINT'", "'INT'", 
            "'BOOLEAN'", "'IF'", "'ELSE'", "'WHILE'", "'FOR'", "'IN'", "'FUN'", 
            "'VOID'", "'USE'", "'LEFT'", "'RIGHT'", "'UP'", "'DOWN'", "'TRUE'", 
            "'FALSE'", "'OR'", "'AND'", "'NOT'", "'RETURN'", "'=='", "'!='", 
            "'<'", "'>'", "'('", "')'", "'*'", "'/'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "RETURN", "EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", 
            "LPAREN", "RPAREN", "MUL", "DIV", "ADD", "SUB", "COMMENT", "ID", 
            "RAND", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "RETURN", "EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", 
                  "LPAREN", "RPAREN", "MUL", "DIV", "ADD", "SUB", "COMMENT", 
                  "ID", "RAND", "INT", "WS" ]

    grammarFileName = "JailBreakLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


