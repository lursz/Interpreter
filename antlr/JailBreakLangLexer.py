# Generated from JailBreakLang.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,5,39,241,
        8,39,10,39,12,39,244,9,39,1,39,1,39,1,40,1,40,5,40,250,8,40,10,40,
        12,40,253,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,42,1,42,5,42,270,8,42,10,42,12,42,273,9,42,1,42,
        3,42,276,8,42,1,43,4,43,279,8,43,11,43,12,43,280,1,43,1,43,0,0,44,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,1,0,6,2,0,
        10,10,13,13,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,49,57,1,
        0,48,57,3,0,9,10,13,13,32,32,288,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,1,89,1,0,0,0,3,94,1,0,0,0,5,96,1,0,0,0,7,98,1,0,0,
        0,9,103,1,0,0,0,11,107,1,0,0,0,13,112,1,0,0,0,15,118,1,0,0,0,17,
        120,1,0,0,0,19,122,1,0,0,0,21,126,1,0,0,0,23,133,1,0,0,0,25,138,
        1,0,0,0,27,142,1,0,0,0,29,150,1,0,0,0,31,153,1,0,0,0,33,158,1,0,
        0,0,35,164,1,0,0,0,37,168,1,0,0,0,39,171,1,0,0,0,41,175,1,0,0,0,
        43,180,1,0,0,0,45,186,1,0,0,0,47,189,1,0,0,0,49,194,1,0,0,0,51,199,
        1,0,0,0,53,205,1,0,0,0,55,209,1,0,0,0,57,213,1,0,0,0,59,216,1,0,
        0,0,61,219,1,0,0,0,63,222,1,0,0,0,65,224,1,0,0,0,67,226,1,0,0,0,
        69,228,1,0,0,0,71,230,1,0,0,0,73,232,1,0,0,0,75,234,1,0,0,0,77,236,
        1,0,0,0,79,238,1,0,0,0,81,247,1,0,0,0,83,254,1,0,0,0,85,275,1,0,
        0,0,87,278,1,0,0,0,89,90,5,87,0,0,90,91,5,65,0,0,91,92,5,76,0,0,
        92,93,5,76,0,0,93,2,1,0,0,0,94,95,5,61,0,0,95,4,1,0,0,0,96,97,5,
        44,0,0,97,6,1,0,0,0,98,99,5,84,0,0,99,100,5,82,0,0,100,101,5,65,
        0,0,101,102,5,80,0,0,102,8,1,0,0,0,103,104,5,75,0,0,104,105,5,69,
        0,0,105,106,5,89,0,0,106,10,1,0,0,0,107,108,5,71,0,0,108,109,5,65,
        0,0,109,110,5,84,0,0,110,111,5,69,0,0,111,12,1,0,0,0,112,113,5,71,
        0,0,113,114,5,85,0,0,114,115,5,65,0,0,115,116,5,82,0,0,116,117,5,
        68,0,0,117,14,1,0,0,0,118,119,5,123,0,0,119,16,1,0,0,0,120,121,5,
        125,0,0,121,18,1,0,0,0,122,123,5,77,0,0,123,124,5,65,0,0,124,125,
        5,80,0,0,125,20,1,0,0,0,126,127,5,80,0,0,127,128,5,76,0,0,128,129,
        5,65,0,0,129,130,5,89,0,0,130,131,5,69,0,0,131,132,5,82,0,0,132,
        22,1,0,0,0,133,134,5,69,0,0,134,135,5,88,0,0,135,136,5,73,0,0,136,
        137,5,84,0,0,137,24,1,0,0,0,138,139,5,73,0,0,139,140,5,78,0,0,140,
        141,5,84,0,0,141,26,1,0,0,0,142,143,5,66,0,0,143,144,5,79,0,0,144,
        145,5,79,0,0,145,146,5,76,0,0,146,147,5,69,0,0,147,148,5,65,0,0,
        148,149,5,78,0,0,149,28,1,0,0,0,150,151,5,73,0,0,151,152,5,70,0,
        0,152,30,1,0,0,0,153,154,5,69,0,0,154,155,5,76,0,0,155,156,5,83,
        0,0,156,157,5,69,0,0,157,32,1,0,0,0,158,159,5,87,0,0,159,160,5,72,
        0,0,160,161,5,73,0,0,161,162,5,76,0,0,162,163,5,69,0,0,163,34,1,
        0,0,0,164,165,5,70,0,0,165,166,5,79,0,0,166,167,5,82,0,0,167,36,
        1,0,0,0,168,169,5,73,0,0,169,170,5,78,0,0,170,38,1,0,0,0,171,172,
        5,70,0,0,172,173,5,85,0,0,173,174,5,78,0,0,174,40,1,0,0,0,175,176,
        5,76,0,0,176,177,5,69,0,0,177,178,5,70,0,0,178,179,5,84,0,0,179,
        42,1,0,0,0,180,181,5,82,0,0,181,182,5,73,0,0,182,183,5,71,0,0,183,
        184,5,72,0,0,184,185,5,84,0,0,185,44,1,0,0,0,186,187,5,85,0,0,187,
        188,5,80,0,0,188,46,1,0,0,0,189,190,5,68,0,0,190,191,5,79,0,0,191,
        192,5,87,0,0,192,193,5,78,0,0,193,48,1,0,0,0,194,195,5,84,0,0,195,
        196,5,82,0,0,196,197,5,85,0,0,197,198,5,69,0,0,198,50,1,0,0,0,199,
        200,5,70,0,0,200,201,5,65,0,0,201,202,5,76,0,0,202,203,5,83,0,0,
        203,204,5,69,0,0,204,52,1,0,0,0,205,206,5,78,0,0,206,207,5,79,0,
        0,207,208,5,84,0,0,208,54,1,0,0,0,209,210,5,65,0,0,210,211,5,78,
        0,0,211,212,5,68,0,0,212,56,1,0,0,0,213,214,5,79,0,0,214,215,5,82,
        0,0,215,58,1,0,0,0,216,217,5,61,0,0,217,218,5,61,0,0,218,60,1,0,
        0,0,219,220,5,33,0,0,220,221,5,61,0,0,221,62,1,0,0,0,222,223,5,60,
        0,0,223,64,1,0,0,0,224,225,5,62,0,0,225,66,1,0,0,0,226,227,5,40,
        0,0,227,68,1,0,0,0,228,229,5,41,0,0,229,70,1,0,0,0,230,231,5,42,
        0,0,231,72,1,0,0,0,232,233,5,47,0,0,233,74,1,0,0,0,234,235,5,43,
        0,0,235,76,1,0,0,0,236,237,5,45,0,0,237,78,1,0,0,0,238,242,5,35,
        0,0,239,241,8,0,0,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,
        0,0,242,243,1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,246,6,39,
        0,0,246,80,1,0,0,0,247,251,7,1,0,0,248,250,7,2,0,0,249,248,1,0,0,
        0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,82,1,0,0,0,
        253,251,1,0,0,0,254,255,5,82,0,0,255,256,5,65,0,0,256,257,5,78,0,
        0,257,258,5,68,0,0,258,259,5,79,0,0,259,260,5,77,0,0,260,261,1,0,
        0,0,261,262,5,40,0,0,262,263,3,85,42,0,263,264,5,44,0,0,264,265,
        3,85,42,0,265,266,5,41,0,0,266,84,1,0,0,0,267,271,7,3,0,0,268,270,
        7,4,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,
        1,0,0,0,272,276,1,0,0,0,273,271,1,0,0,0,274,276,5,48,0,0,275,267,
        1,0,0,0,275,274,1,0,0,0,276,86,1,0,0,0,277,279,7,5,0,0,278,277,1,
        0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,282,1,
        0,0,0,282,283,6,43,0,0,283,88,1,0,0,0,6,0,242,251,271,275,280,1,
        6,0,0
    ]

class JailBreakLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    EQUALS = 30
    NOT_EQUALS = 31
    LESS_THAN = 32
    GREATER_THAN = 33
    LPAREN = 34
    RPAREN = 35
    MUL = 36
    DIV = 37
    ADD = 38
    SUB = 39
    COMMENT = 40
    ID = 41
    RAND = 42
    INT = 43
    WS = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'WALL'", "'='", "','", "'TRAP'", "'KEY'", "'GATE'", "'GUARD'", 
            "'{'", "'}'", "'MAP'", "'PLAYER'", "'EXIT'", "'INT'", "'BOOLEAN'", 
            "'IF'", "'ELSE'", "'WHILE'", "'FOR'", "'IN'", "'FUN'", "'LEFT'", 
            "'RIGHT'", "'UP'", "'DOWN'", "'TRUE'", "'FALSE'", "'NOT'", "'AND'", 
            "'OR'", "'=='", "'!='", "'<'", "'>'", "'('", "')'", "'*'", "'/'", 
            "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN", "LPAREN", 
            "RPAREN", "MUL", "DIV", "ADD", "SUB", "COMMENT", "ID", "RAND", 
            "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "EQUALS", "NOT_EQUALS", "LESS_THAN", 
                  "GREATER_THAN", "LPAREN", "RPAREN", "MUL", "DIV", "ADD", 
                  "SUB", "COMMENT", "ID", "RAND", "INT", "WS" ]

    grammarFileName = "JailBreakLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


