# Generated from JailBreakLang.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,277,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,5,33,234,8,33,10,33,12,33,237,9,33,1,33,1,33,1,
        34,1,34,5,34,243,8,34,10,34,12,34,246,9,34,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,5,36,263,8,
        36,10,36,12,36,266,9,36,1,36,3,36,269,8,36,1,37,4,37,272,8,37,11,
        37,12,37,273,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,6,2,0,10,10,
        13,13,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,49,57,1,0,48,57,
        3,0,9,10,13,13,32,32,281,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,
        1,0,0,0,3,82,1,0,0,0,5,84,1,0,0,0,7,86,1,0,0,0,9,91,1,0,0,0,11,95,
        1,0,0,0,13,100,1,0,0,0,15,106,1,0,0,0,17,108,1,0,0,0,19,110,1,0,
        0,0,21,114,1,0,0,0,23,121,1,0,0,0,25,126,1,0,0,0,27,129,1,0,0,0,
        29,131,1,0,0,0,31,133,1,0,0,0,33,139,1,0,0,0,35,143,1,0,0,0,37,146,
        1,0,0,0,39,150,1,0,0,0,41,155,1,0,0,0,43,161,1,0,0,0,45,164,1,0,
        0,0,47,169,1,0,0,0,49,176,1,0,0,0,51,188,1,0,0,0,53,196,1,0,0,0,
        55,203,1,0,0,0,57,210,1,0,0,0,59,213,1,0,0,0,61,218,1,0,0,0,63,224,
        1,0,0,0,65,228,1,0,0,0,67,231,1,0,0,0,69,240,1,0,0,0,71,247,1,0,
        0,0,73,268,1,0,0,0,75,271,1,0,0,0,77,78,5,87,0,0,78,79,5,65,0,0,
        79,80,5,76,0,0,80,81,5,76,0,0,81,2,1,0,0,0,82,83,5,61,0,0,83,4,1,
        0,0,0,84,85,5,44,0,0,85,6,1,0,0,0,86,87,5,84,0,0,87,88,5,82,0,0,
        88,89,5,65,0,0,89,90,5,80,0,0,90,8,1,0,0,0,91,92,5,75,0,0,92,93,
        5,69,0,0,93,94,5,89,0,0,94,10,1,0,0,0,95,96,5,71,0,0,96,97,5,65,
        0,0,97,98,5,84,0,0,98,99,5,69,0,0,99,12,1,0,0,0,100,101,5,71,0,0,
        101,102,5,85,0,0,102,103,5,65,0,0,103,104,5,82,0,0,104,105,5,68,
        0,0,105,14,1,0,0,0,106,107,5,123,0,0,107,16,1,0,0,0,108,109,5,125,
        0,0,109,18,1,0,0,0,110,111,5,77,0,0,111,112,5,65,0,0,112,113,5,80,
        0,0,113,20,1,0,0,0,114,115,5,80,0,0,115,116,5,76,0,0,116,117,5,65,
        0,0,117,118,5,89,0,0,118,119,5,69,0,0,119,120,5,82,0,0,120,22,1,
        0,0,0,121,122,5,69,0,0,122,123,5,88,0,0,123,124,5,73,0,0,124,125,
        5,84,0,0,125,24,1,0,0,0,126,127,5,73,0,0,127,128,5,70,0,0,128,26,
        1,0,0,0,129,130,5,40,0,0,130,28,1,0,0,0,131,132,5,41,0,0,132,30,
        1,0,0,0,133,134,5,87,0,0,134,135,5,72,0,0,135,136,5,73,0,0,136,137,
        5,76,0,0,137,138,5,69,0,0,138,32,1,0,0,0,139,140,5,70,0,0,140,141,
        5,79,0,0,141,142,5,82,0,0,142,34,1,0,0,0,143,144,5,73,0,0,144,145,
        5,78,0,0,145,36,1,0,0,0,146,147,5,70,0,0,147,148,5,85,0,0,148,149,
        5,78,0,0,149,38,1,0,0,0,150,151,5,76,0,0,151,152,5,69,0,0,152,153,
        5,70,0,0,153,154,5,84,0,0,154,40,1,0,0,0,155,156,5,82,0,0,156,157,
        5,73,0,0,157,158,5,71,0,0,158,159,5,72,0,0,159,160,5,84,0,0,160,
        42,1,0,0,0,161,162,5,85,0,0,162,163,5,80,0,0,163,44,1,0,0,0,164,
        165,5,68,0,0,165,166,5,79,0,0,166,167,5,87,0,0,167,168,5,78,0,0,
        168,46,1,0,0,0,169,170,5,73,0,0,170,171,5,70,0,0,171,172,5,87,0,
        0,172,173,5,65,0,0,173,174,5,76,0,0,174,175,5,76,0,0,175,48,1,0,
        0,0,176,177,5,73,0,0,177,178,5,70,0,0,178,179,5,68,0,0,179,180,5,
        73,0,0,180,181,5,82,0,0,181,182,5,69,0,0,182,183,5,67,0,0,183,184,
        5,84,0,0,184,185,5,73,0,0,185,186,5,79,0,0,186,187,5,78,0,0,187,
        50,1,0,0,0,188,189,5,73,0,0,189,190,5,70,0,0,190,191,5,71,0,0,191,
        192,5,85,0,0,192,193,5,65,0,0,193,194,5,82,0,0,194,195,5,68,0,0,
        195,52,1,0,0,0,196,197,5,73,0,0,197,198,5,70,0,0,198,199,5,84,0,
        0,199,200,5,82,0,0,200,201,5,65,0,0,201,202,5,80,0,0,202,54,1,0,
        0,0,203,204,5,73,0,0,204,205,5,70,0,0,205,206,5,71,0,0,206,207,5,
        65,0,0,207,208,5,84,0,0,208,209,5,69,0,0,209,56,1,0,0,0,210,211,
        5,78,0,0,211,212,5,79,0,0,212,58,1,0,0,0,213,214,5,84,0,0,214,215,
        5,82,0,0,215,216,5,85,0,0,216,217,5,69,0,0,217,60,1,0,0,0,218,219,
        5,70,0,0,219,220,5,65,0,0,220,221,5,76,0,0,221,222,5,83,0,0,222,
        223,5,69,0,0,223,62,1,0,0,0,224,225,5,65,0,0,225,226,5,78,0,0,226,
        227,5,68,0,0,227,64,1,0,0,0,228,229,5,79,0,0,229,230,5,82,0,0,230,
        66,1,0,0,0,231,235,5,35,0,0,232,234,8,0,0,0,233,232,1,0,0,0,234,
        237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,
        235,1,0,0,0,238,239,6,33,0,0,239,68,1,0,0,0,240,244,7,1,0,0,241,
        243,7,2,0,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,
        245,1,0,0,0,245,70,1,0,0,0,246,244,1,0,0,0,247,248,5,82,0,0,248,
        249,5,65,0,0,249,250,5,78,0,0,250,251,5,68,0,0,251,252,5,79,0,0,
        252,253,5,77,0,0,253,254,1,0,0,0,254,255,5,40,0,0,255,256,3,73,36,
        0,256,257,5,44,0,0,257,258,3,73,36,0,258,259,5,41,0,0,259,72,1,0,
        0,0,260,264,7,3,0,0,261,263,7,4,0,0,262,261,1,0,0,0,263,266,1,0,
        0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,269,1,0,0,0,266,264,1,0,
        0,0,267,269,5,48,0,0,268,260,1,0,0,0,268,267,1,0,0,0,269,74,1,0,
        0,0,270,272,7,5,0,0,271,270,1,0,0,0,272,273,1,0,0,0,273,271,1,0,
        0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,6,37,0,0,276,76,1,0,
        0,0,6,0,235,244,264,268,273,1,6,0,0
    ]

class JailBreakLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    COMMENT = 34
    ID = 35
    RAND = 36
    INT = 37
    WS = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'WALL'", "'='", "','", "'TRAP'", "'KEY'", "'GATE'", "'GUARD'", 
            "'{'", "'}'", "'MAP'", "'PLAYER'", "'EXIT'", "'IF'", "'('", 
            "')'", "'WHILE'", "'FOR'", "'IN'", "'FUN'", "'LEFT'", "'RIGHT'", 
            "'UP'", "'DOWN'", "'IFWALL'", "'IFDIRECTION'", "'IFGUARD'", 
            "'IFTRAP'", "'IFGATE'", "'NO'", "'TRUE'", "'FALSE'", "'AND'", 
            "'OR'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "ID", "RAND", "INT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "COMMENT", "ID", "RAND", "INT", "WS" ]

    grammarFileName = "JailBreakLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


